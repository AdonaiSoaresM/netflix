{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport jwtService from './common/service/jwt.service';\nimport { useToast } from 'vue-toastification';\nconst toast = useToast();\nexport default {\n  name: 'App',\n  async mounted() {\n    if (this.$route.name !== \"Login\") {\n      const token = await jwtService.validateToken();\n      if (!token) {\n        this.$router.push(\"/login\");\n        toast.error(\"Please, login again.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["jwtService","useToast","toast","name","mounted","$route","token","validateToken","$router","push","error"],"sources":["C:\\Users\\Adonai\\Documents\\Projetos\\netflix\\frontend\\src\\App.vue"],"sourcesContent":["<template>\r\n  <RouterView />\r\n</template>\r\n\r\n<script>\r\nimport jwtService from './common/service/jwt.service';\r\nimport { useToast } from 'vue-toastification';\r\n\r\nconst toast = useToast()\r\nexport default {\r\n  name: 'App',\r\n  async mounted(){\r\n    if(this.$route.name !== \"Login\"){\r\n    const token = await jwtService.validateToken()\r\n    if(!token){\r\n      this.$router.push(\"/login\")\r\n      toast.error(\"Please, login again.\")\r\n    }\r\n  }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n@font-face {\r\n  font-family: Roboto;\r\n  src: url(\"./assets/fonts/Roboto-Regular.ttf\");\r\n}\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\r\n\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\n#app, html, body {\r\n  height: 100%;\r\n  width: 100%;\r\n  margin: 0px;\r\n  padding: 0px;\r\n  font-family: 'Roboto';\r\n  overflow: auto;\r\n}\r\n\r\n*::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n</style>\r\n"],"mappings":";AAKA,OAAOA,UAAS,MAAO,8BAA8B;AACrD,SAASC,QAAO,QAAS,oBAAoB;AAE7C,MAAMC,KAAI,GAAID,QAAQ,EAAC;AACvB,eAAe;EACbE,IAAI,EAAE,KAAK;EACX,MAAMC,OAAOA,CAAA,EAAE;IACb,IAAG,IAAI,CAACC,MAAM,CAACF,IAAG,KAAM,OAAO,EAAC;MAChC,MAAMG,KAAI,GAAI,MAAMN,UAAU,CAACO,aAAa,EAAC;MAC7C,IAAG,CAACD,KAAK,EAAC;QACR,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC,QAAQ;QAC1BP,KAAK,CAACQ,KAAK,CAAC,sBAAsB;MACpC;IACF;EACA;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}