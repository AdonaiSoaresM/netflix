{"ast":null,"code":"import jwtService from './common/service/jwt.service';\nimport router from './router/router';\nimport { useToast } from 'vue-toastification';\nconst toast = useToast();\nrouter.beforeEach(async to => {\n  if (to.name != \"Login\") {\n    const token = await jwtService.validateToken();\n    // if(!token){\n    //   router.push(\"/login\")\n    //   toast.error(\"Please, login again.\")\n    // }\n  }\n});\n\nexport default {\n  name: 'App'\n};","map":{"version":3,"names":["jwtService","router","useToast","toast","beforeEach","to","name","token","validateToken"],"sources":["C:\\Users\\Adonai\\Documents\\Projetos\\netflix\\frontend\\src\\App.vue"],"sourcesContent":["<template>\r\n  <RouterView />\r\n</template>\r\n\r\n<script>\r\nimport jwtService from './common/service/jwt.service';\r\nimport router from './router/router';\r\nimport { useToast } from 'vue-toastification';\r\n\r\nconst toast = useToast()\r\nrouter.beforeEach(async (to) => {\r\n  if(to.name != \"Login\"){\r\n    const token = await jwtService.validateToken()\r\n    // if(!token){\r\n    //   router.push(\"/login\")\r\n    //   toast.error(\"Please, login again.\")\r\n    // }\r\n  }\r\n})\r\n\r\nexport default {\r\n  name: 'App',\r\n}\r\n</script>\r\n\r\n<style>\r\n@font-face {\r\n  font-family: Roboto;\r\n  src: url(\"./assets/fonts/Roboto-Regular.ttf\");\r\n}\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\r\n\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\n#app, html, body {\r\n  height: 100%;\r\n  width: 100%;\r\n  margin: 0px;\r\n  padding: 0px;\r\n  font-family: 'Roboto';\r\n  overflow: auto;\r\n}\r\n\r\n*::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n</style>\r\n"],"mappings":"AAKA,OAAOA,UAAS,MAAO,8BAA8B;AACrD,OAAOC,MAAK,MAAO,iBAAiB;AACpC,SAASC,QAAO,QAAS,oBAAoB;AAE7C,MAAMC,KAAI,GAAID,QAAQ,EAAC;AACvBD,MAAM,CAACG,UAAU,CAAC,MAAOC,EAAE,IAAK;EAC9B,IAAGA,EAAE,CAACC,IAAG,IAAK,OAAO,EAAC;IACpB,MAAMC,KAAI,GAAI,MAAMP,UAAU,CAACQ,aAAa,EAAC;IAC7C;IACA;IACA;IACA;EACF;AACF,CAAC;;AAED,eAAe;EACbF,IAAI,EAAE;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}